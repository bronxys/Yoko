"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SignatureGenerator = exports.RingBuffer = void 0;
const signature_format_1 = require("./signature-format");
const fft_js_1 = __importDefault(require("fft.js"));
const hanning = (m) => Array(m)
    .fill(0)
    .map((_, n) => 0.5 - 0.5 * Math.cos((2 * Math.PI * n) / (m - 1)));
const pyMod = (a, b) => (a % b) >= 0 ? (a % b) : b + (a % b);
const MAX_TIME_SECONDS = 8;
const MAX_PEAKS = 255;
const HANNING_MATRIX = hanning(2050).slice(1, 2049);
class RingBuffer {
    constructor(bufferSize, defaultValue) {
        this.bufferSize = bufferSize;
        this.position = 0;
        this.written = 0;
        if (typeof defaultValue === 'function') {
            this.list = Array(bufferSize).fill(null).map(defaultValue);
        }
        else {
            this.list = Array(bufferSize).fill(defaultValue !== null && defaultValue !== void 0 ? defaultValue : null);
        }
    }
    append(value) {
        this.list[this.position] = value;
        this.position++;
        this.written++;
        this.position %= this.bufferSize;
    }
}
exports.RingBuffer = RingBuffer;
class SignatureGenerator {
    constructor() {
        this.inputPendingProcessing = [];
        this.samplesProcessed = 0;
        this.initFields();
    }
    initFields() {
        this.ringBufferOfSamples = new RingBuffer(2048, 0);
        this.fftOutputs = new RingBuffer(256, () => new Float64Array(Array(1025).fill(0)));
        this.spreadFFTsOutput = new RingBuffer(256, () => new Float64Array(Array(1025).fill(0)));
        this.nextSignature = new signature_format_1.DecodedMessage();
        this.nextSignature.sampleRateHz = 16000;
        this.nextSignature.numberSamples = 0;
        this.nextSignature.frequencyBandToSoundPeaks = {};
    }
    feedInput(s16leMonoSamples) {
        this.inputPendingProcessing = this.inputPendingProcessing.concat(s16leMonoSamples);
    }
    getNextSignature() {
        if (this.inputPendingProcessing.length - this.samplesProcessed < 128) {
            return null;
        }
        while (((this.inputPendingProcessing.length - this.samplesProcessed) >= 128) &&
            (((this.nextSignature.numberSamples / this.nextSignature.sampleRateHz) < MAX_TIME_SECONDS) ||
                (Object.values(this.nextSignature.frequencyBandToSoundPeaks).map(e => e.length).reduce((a, b) => a + b, 0) < MAX_PEAKS))) {
            this.processInput(this.inputPendingProcessing.slice(this.samplesProcessed, this.samplesProcessed + 128));
            this.samplesProcessed += 128;
        }
        let returnedSignature = this.nextSignature;
        this.initFields();
        return returnedSignature;
    }
    processInput(s16leMonoSamples) {
        this.nextSignature.numberSamples += s16leMonoSamples.length;
        for (let positionOfChunk = 0; positionOfChunk < s16leMonoSamples.length; positionOfChunk += 128) {
            this.doFFT(s16leMonoSamples.slice(positionOfChunk, positionOfChunk + 128));
            this.doPeakSpreadingAndRecognition();
        }
    }
    doFFT(batchOf128S16leMonoSamples) {
        this.ringBufferOfSamples.list.splice(this.ringBufferOfSamples.position, batchOf128S16leMonoSamples.length, ...batchOf128S16leMonoSamples);
        this.ringBufferOfSamples.position += batchOf128S16leMonoSamples.length;
        this.ringBufferOfSamples.position %= 2048;
        this.ringBufferOfSamples.written += batchOf128S16leMonoSamples.length;
        let excerptFromRingBuffer = [
            ...this.ringBufferOfSamples.list.slice(this.ringBufferOfSamples.position),
            ...this.ringBufferOfSamples.list.slice(0, this.ringBufferOfSamples.position),
        ];
        const fft = new fft_js_1.default(excerptFromRingBuffer.length);
        const out = fft.createComplexArray();
        fft.realTransform(out, excerptFromRingBuffer.map((v, i) => (v * HANNING_MATRIX[i])));
        // The premultiplication of the array is for applying a windowing function before the DFT (slighty rounded Hanning without zeros at edges)
        let results = Array(1025).fill(0);
        for (let i = 0; i < out.length; i += 2) {
            const e = Math.sqrt((out[i] * out[i]) + (out[i + 1] * out[i + 1]));
            results[i / 2] = Math.max(0.0000000001, e);
        }
        results = results.slice(0, 1025);
        if (results.length != 1025) {
            console.log("ASSERT FAILED!");
        }
        this.fftOutputs.append(new Float64Array(results));
    }
    doPeakSpreadingAndRecognition() {
        this.doPeakSpreading();
        if (this.spreadFFTsOutput.written >= 46)
            this.doPeakRecognition();
    }
    doPeakSpreading() {
        let originLastFFT = this.fftOutputs.list[pyMod(this.fftOutputs.position - 1, this.fftOutputs.bufferSize)], spreadLastFFT = new Float64Array(originLastFFT);
        for (let position = 0; position < 1025; position++) {
            if (position < 1023) {
                spreadLastFFT[position] = Math.max(...spreadLastFFT.slice(position, position + 3));
            }
            let maxValue = spreadLastFFT[position];
            for (let formerFftNum of [-1, -3, -6]) {
                let formerFftOutput = this.spreadFFTsOutput.list[pyMod(this.spreadFFTsOutput.position + formerFftNum, this.spreadFFTsOutput.bufferSize)];
                if (isNaN(formerFftOutput[position]))
                    continue;
                formerFftOutput[position] = maxValue = Math.max(formerFftOutput[position], maxValue);
            }
        }
        this.spreadFFTsOutput.append(spreadLastFFT);
    }
    doPeakRecognition() {
        let fftMinus46 = this.fftOutputs.list[pyMod(this.fftOutputs.position - 46, this.fftOutputs.bufferSize)];
        let fftMinus49 = this.spreadFFTsOutput.list[pyMod(this.spreadFFTsOutput.position - 49, this.spreadFFTsOutput.bufferSize)];
        const range = (a, b, c = 1) => {
            let out = [];
            for (let i = a; i < b; i += c)
                out.push(i);
            return out;
        };
        for (let binPosition = 10; binPosition < 1015; binPosition++) {
            // Ensire that the bin is large enough to be a peak
            if ((fftMinus46[binPosition] >= 1 / 64) && (fftMinus46[binPosition] >= fftMinus49[binPosition - 1])) {
                let maxNeighborInFftMinus49 = 0;
                for (let neighborOffset of [...range(-10, -3, 3), -3, 1, ...range(2, 9, 3)]) {
                    const candidate = fftMinus49[binPosition + neighborOffset];
                    if (isNaN(candidate))
                        continue;
                    maxNeighborInFftMinus49 = Math.max(candidate, maxNeighborInFftMinus49);
                }
                if (fftMinus46[binPosition] > maxNeighborInFftMinus49) {
                    let maxNeighborInOtherAdjacentFFTs = maxNeighborInFftMinus49;
                    for (let otherOffset of [-53, -45, ...range(165, 201, 7), ...range(214, 250, 7)]) {
                        const candidate = this.spreadFFTsOutput.list[pyMod(this.spreadFFTsOutput.position + otherOffset, this.spreadFFTsOutput.bufferSize)][binPosition - 1];
                        if (isNaN(candidate))
                            continue;
                        maxNeighborInOtherAdjacentFFTs = Math.max(candidate, maxNeighborInOtherAdjacentFFTs);
                    }
                    if (fftMinus46[binPosition] > maxNeighborInOtherAdjacentFFTs) {
                        // This is a peak. Store the peak
                        let fftNumber = this.spreadFFTsOutput.written - 46;
                        let peakMagnitude = Math.log(Math.max(1 / 64, fftMinus46[binPosition])) * 1477.3 + 6144, peakMagnitudeBefore = Math.log(Math.max(1 / 64, fftMinus46[binPosition - 1])) * 1477.3 + 6144, peakMagnitudeAfter = Math.log(Math.max(1 / 64, fftMinus46[binPosition + 1])) * 1477.3 + 6144;
                        let peakVariation1 = peakMagnitude * 2 - peakMagnitudeBefore - peakMagnitudeAfter, peakVariation2 = (peakMagnitudeAfter - peakMagnitudeBefore) * 32 / peakVariation1;
                        let correctedPeakFrequencyBin = binPosition * 64 + peakVariation2;
                        if (peakVariation1 <= 0) {
                            console.log("Assert 2 failed - " + peakVariation1);
                        }
                        let frequencyHz = correctedPeakFrequencyBin * (16000 / 2 / 1024 / 64);
                        let band;
                        if (frequencyHz < 250) {
                            continue;
                        }
                        else if (frequencyHz < 520) {
                            band = signature_format_1.FrequencyBand._250_520;
                        }
                        else if (frequencyHz < 1450) {
                            band = signature_format_1.FrequencyBand._520_1450;
                        }
                        else if (frequencyHz < 3500) {
                            band = signature_format_1.FrequencyBand._1450_3500;
                        }
                        else if (frequencyHz <= 5500) {
                            band = signature_format_1.FrequencyBand._3500_5500;
                        }
                        else
                            continue;
                        if (!Object.keys(this.nextSignature.frequencyBandToSoundPeaks).includes(signature_format_1.FrequencyBand[band])) {
                            this.nextSignature.frequencyBandToSoundPeaks[signature_format_1.FrequencyBand[band]] = [];
                        }
                        this.nextSignature.frequencyBandToSoundPeaks[signature_format_1.FrequencyBand[band]].push(new signature_format_1.FrequencyPeak(fftNumber, Math.round(peakMagnitude), Math.round(correctedPeakFrequencyBin), 16000));
                    }
                }
            }
        }
    }
}
exports.SignatureGenerator = SignatureGenerator;
//# sourceMappingURL=data:application/json;base64,