"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getHtml5Player = getHtml5Player;
const Platform_1 = require("../../../platforms/Platform");
const Signature_1 = require("../../../core/Signature");
const Fetcher_1 = require("../../../core/Fetcher");
const Url_1 = require("../../../utils/Url");
const Constants_1 = require("../../../utils/Constants");
const SHIM = Platform_1.Platform.getShim(), GITHUB_API_BASE_URL = `https://raw.githubusercontent.com/${SHIM.info.repo.user}/${SHIM.info.repo.name}/dev/data/player`, FileCache = SHIM.fileCache;
function getPlayerId(body) {
    if (!body) {
        return null;
    }
    const MATCH = body.match(/player\\\/([a-zA-Z0-9]+)\\\//);
    if (MATCH) {
        return MATCH[1];
    }
    return null;
}
async function getHtml5Player(options) {
    const CACHE = await FileCache.get('html5Player');
    if (CACHE && CACHE.url) {
        return {
            url: CACHE.url,
            body: CACHE.body,
            id: CACHE.id,
            signatureTimestamp: CACHE.signatureTimestamp,
        };
    }
    let playerId = undefined, signatureTimestamp = undefined;
    try {
        const IFRAME_API_BODY = await Fetcher_1.Fetcher.request(Url_1.Url.getIframeApiUrl(), {
            ...options,
            requestOptions: {
                headers: { 'x-browser-channel': 'stable', 'x-browser-copyright': 'Copyright 2024 Google LLC. All rights reserved.', 'x-browser-validation': 'g+9zsjnuPhmKvFM5e6eaEzcB1JY=', 'x-browser-year': '2024' },
            },
        });
        playerId = getPlayerId(IFRAME_API_BODY);
    }
    catch { }
    if (!playerId) {
        try {
            const GITHUB_PLAYER_JSON = JSON.parse(await Fetcher_1.Fetcher.request(GITHUB_API_BASE_URL + '/data.json'));
            playerId = GITHUB_PLAYER_JSON.playerId;
            signatureTimestamp = GITHUB_PLAYER_JSON.signatureTimestamp;
        }
        catch { }
    }
    if (!playerId) {
        playerId = Constants_1.CURRENT_PLAYER_ID;
    }
    const PLAYER_URL = Url_1.Url.getPlayerJsUrl(playerId), HTML5_PLAYER_BODY = (PLAYER_URL ? await Fetcher_1.Fetcher.request(PLAYER_URL, options) : '') || (await Fetcher_1.Fetcher.request(GITHUB_API_BASE_URL + '/base.js')), DATA = {
        url: PLAYER_URL,
        body: HTML5_PLAYER_BODY || null,
        id: playerId,
        signatureTimestamp: signatureTimestamp || (PLAYER_URL ? Signature_1.Signature.getSignatureTimestamp(HTML5_PLAYER_BODY) || '' : ''),
    };
    FileCache.set('html5Player', JSON.stringify(DATA));
    return DATA;
}
//# sourceMappingURL=Html5Player.js.map